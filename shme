In the following server's program, it asks for and attaches a shared memory of
four integers.
/* Lab1.c */
#include <sys/types.h>
#include <sys/ipc.h>
#include <sys/shm.h>
#include <stdio.h>
int shm_id;
key_t mem_key;
int *shm_ptr;
mem_key = ftok(".", 'a');
shm_id = shmget(mem_key, 4*sizeof(int), IPC_CREAT | 0666);
if (shm_id < 0)
{
printf("* shmget error (server) *\n");
exit(1);
}
shm_ptr = (int ) shmat(shm_id, NULL, 0); / attach */
if ((int) shm_ptr == -1)
{
printf("* shmat error (server) *\n");
exit(1);
}

The following is the counterpart of a client.
/* Lab2.c */
#include <sys/types.h>
#include <sys/ipc.h>
#include <sys/shm.h>
#include <stdio.h>
int shm_id;
key_t mem_key;
int *shm_ptr;
mem_key = ftok(".", 'a');

shm_id = shmget(mem_key, 4*sizeof(int), 0666);
if (shm_id < 0)
{
printf("* shmget error (client) *\n");
exit(1);
}
shm_ptr = (int *) shmat(shm_id, NULL, 0);
if ((int) shm_ptr == -1)
{ /* attach */
printf("* shmat error (client) *\n");
exit(1);
}

Two different processes communicating via shared memory we develop two
programs here that illustrate the passing of a simple piece of memory (a string) between
the processes if running simultaneously:
/* shm_server.c */
#include <sys/types.h>
#include <sys/ipc.h>
#include <sys/shm.h>
#include <stdio.h>
#define SHMSIZE 27
main()
{
char c;
int shmid;
key_t key;
char *shm, *s;
/* * We'll name our shared memory segment * "5678". */
key = 5678;
/* * create the segment.* */
if ((shmid = shmget(key, SHMSIZE, IPC_CREAT | 0666)) < 0)
{
perror("shmget");
exit(1);
}
/* Now we attach the segment to our data space./
if ((shm = shmat(shmid, NULL, 0)) == (char *) -1)
{
perror("shmat");
exit(1);
}
/** Now put some things into the memory for the other process to read. */

s = shm;
for (c = 'a'; c <= 'z'; c++)
*s++ = c;
*s = NULL;
/** Finally, we wait until the other process
* Changes the first character of our memory
* to '*', indicating that it has read what
* we put there.
*/
while (shm != '')
sleep(1);
exit(0);
}
-- Simply creates the string and shared memory portion.
-- run it in background

/* shm_client.c */
/*
* shm-client - client program to demonstrate shared
memory. */
#include <sys/types.h>
#include <sys/ipc.h>
#include <sys/shm.h>
#include <stdio.h>
#define SHMSIZE 27
main()
{
int shmid;
key_t key;
char *shm, *s;
/*
* We need to get the segment named
* "5678", created by the server.
*/
key = 5678;
/*
* Locate the
segment. */
if ((shmid = shmget(key, SHMSIZE, 0666)) < 0)
{ perror("shmget");
exit(1);
}
/*

* Now we attach the segment to our data
space. */
if ((shm = shmat(shmid, NULL, 0)) == (char *) -1)
{ perror("shmat");
exit(1);
}
/*
* Now read what the server put in the
memory. */
for (s = shm; *s != NULL; s++)
putchar(*s);
putchar('\n');
/*
* Finally, change the first character of the
* segment to '*', indicating we have read
* the segment.
*/
shm = '';
printf ("\nIts done from client.\n\n\n");
exit(0);
}
-- Attaches itself to the created shared memory portion and prints the string.

Parent and Child processes communicating via shared memory
/*parent_child.c */
#include <sys/types.h>
#include <sys/ipc.h>
#include <sys/shm.h>
int main(void)
{
int shmid;
char *shmPtr;
int n;
if (fork( ) == 0)
{
sleep(5); /* UUPS */
if( (shmid = shmget(2041, 32, 0)) == -1 )
{

exit(1);
}
shmPtr = shmat(shmid, 0, 0);
if (shmPtr == (char *) -1)
exit(2);
printf ("\nChild Reading ....\n\n");
for (n = 0; n < 26; n++)
putchar(shmPtr[n]);
putchar('\n'); }
else
{
if( (shmid = shmget(2041, 32, 0666 | IPC_CREAT)) == -1 )
{
exit(1);
}
shmPtr = shmat(shmid, 0, 0);
if (shmPtr == (char *) -1)
exit(2);
for (n = 0; n < 26; n++)
shmPtr[n] = 'a' + n;
printf ("Parent Writing ....\n\n") ;
for (n = 0; n < 26; n++)
putchar(shmPtr[n]);
putchar('\n'); wait(NULL);
shmdt(NULL);
if( shmctl(shmid, IPC_RMID, NULL) == -1 )
{
perror("shmctl");
exit(-1);
}
}
exit(0);
}
-- One parent places characters in shared memory, and child reads it.

A program that creates a shared memory segment and waits until two other separate
processes writes something into that shared memory segment after which it prints what
is written in shared memory. For the communication between the processes to take
place assume that the process 1 writes 1 in first position of shared memory and waits;
process 2 writes 2 in first position of shared memory and goes on to write 'hello' and

then process 3 writes 3 in first position of shared memory and goes on to write
'memory' and finally the process 1 prints what is in shared memory written by
two other processes
/* process1.c */
#include <sys/types.h>
#include <sys/ipc.h>
#include <sys/shm.h>
#include <stdio.h>
#define SHMSIZE 27
main()
{
char c;
int shmid;
key_t key;
char *shm, *s;
/*
* We'll name our shared memory segment
* "5678".
*/
key = 5678;
/*
* Create the
segment. */
if ((shmid = shmget(key, SHMSIZE, IPC_CREAT | 0666)) < 0)
{ perror("shmget");
exit(1);
}
/*
* Now we attach the segment to our data space.
*/
if ((shm = shmat(shmid, NULL, 0)) == (char *) -1)
{ perror("shmat");
exit(1);
}
/*
* Now put 1 in first
place */
s=shm;
*s++='1';
*s=NULL;
printf("Process1:- I have put the message %s\n",shm);
/*
* Finally, we wait until the other process

* changes the first character of our memory
*/
while (*shm != '2' && *shm+6 != 'o')
sleep(1);
printf("Process1:- Process2 has put the message
%s\n",shm); while (*shm != '3' && *shm+7 != 'y')
sleep(1);
printf("Process1:- Process3 has put the message %s\n",shm);
printf("Process1:- I am quiting\n");
exit(0);
}
/* process2.c */
#include <sys/types.h>
#include <sys/ipc.h>
#include <sys/shm.h>
#include <stdio.h>
#define SHMSIZE 27
main()
{
char c;
int shmid;
key_t key;
char *shm;
/*
* We'll name our shared memory segment.
*/
key = 5678;
/*
* Create the segment.
*/
if ((shmid = shmget(key, SHMSIZE, 0666)) < 0)
{ perror("shmget");
exit(1);
}
/*
* Now we attach the segment to our data space.
*/
if ((shm = shmat(shmid, NULL, 0)) == (char *) -1)
{ perror("shmat");
exit(1);
}
/*

* Now put 1 in first
place */
*shm++='2';
*shm++=' ';
*shm++='h';
*shm++='e';
*shm++='l';
*shm++='l';
*shm++='o';
*shm = NULL;
exit(0);
}
/* process3.c */
#include <sys/types.h>
#include <sys/ipc.h>
#include <sys/shm.h>
#include <stdio.h>
#define SHMSIZE 27
main()
{
char c;
int shmid;
key_t key;
char *shm, *s;
/*
* We'll name our shared memory segment.
*/
key = 5678;
/*
* Create the
segment. */
if ((shmid = shmget(key, SHMSIZE, 0666)) < 0)
{ perror("shmget");
exit(1);
}
/*
* Now we attach the segment to our data space.
*/
if ((shm = shmat(shmid, NULL, 0)) == (char *) -1)
{ perror("shmat");
exit(1);
}
/*
* Now put 1 in first place

*/
*shm++='3';
*shm++=' ';
*shm++='m';
*shm++='e';
*shm++='m';
*shm++='o';
*shm++='r';
*shm++='y';
*shm = NULL;
exit(0);
}

1. Shared Memory for different processes
Shmserver.c
#include &lt;sys/types.h&gt;
#include &lt;sys/ipc.h&gt;
#include &lt;sys/shm.h&gt;
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#define SHMSZ 27
int main()
{
char c;
int shmid;
key_t key;
char *shm, *s;
// We&#39;ll name our shared memory segment &quot;5678&quot;.
key = 5678;
shmid = shmget(key, SHMSZ, IPC_CREAT | 0666);
//Create the segment.
if (shmid &lt; 0)
{
perror(&quot;shmget&quot;);
exit(1);
}
//Now we attach the segment to our data space.
shm = shmat(shmid, NULL, 0);
if (shm == (char *) -1)
{
perror(&quot;shmat&quot;);
exit(1);
}
//Now put some things into the memory for the other process to read.
s = shm;
for (c = &#39;a&#39;; c &lt;= &#39;z&#39;; c++)
*s++ = c;
*s = NULL;
/*
* Finally, we wait until the other process
* changes the first character of our memory
* to &#39;*&#39;, indicating that it has read what we put there.
*/
while (shm != &#39;&#39;)

sleep(1);
shmdt(shm);
shmctl(shmid,IPC_RMID,NULL);
exit(0);
}
Shmclient.c
#include &lt;sys/types.h&gt;
#include &lt;sys/ipc.h&gt;
#include &lt;sys/shm.h&gt;
#include &lt;stdio.h&gt;
#include&lt;stdlib.h&gt;
#define SHMSZ 27
int main()
{
int shmid;
key_t key;
char *shm, *s;
// We need to get the segment named &quot;5678&quot;, created by the server.
key = 5678;
//Locate the segment.
shmid = shmget(key, SHMSZ, 0666);
if (shmid &lt; 0)
{
perror(&quot;shmget&quot;);
exit(1);
}
//Now we attach the segment to our data space.
shm = shmat(shmid, NULL, 0);
if (shm == (char *) -1)
{
perror(&quot;shmat&quot;);
exit(1);
}
//Now read what the server put in the memory.
for (s = shm; *s != NULL; s++)
putchar(*s);
putchar(&#39;\n&#39;);
/*
* Finally, change the first character of the
* segment to &#39;*&#39;, indicating we have read the segment.
*/

shm = &#39;&#39;;
shmdt(shm);
exit(0);
}

2. Shared memory for parent child
Shmfork.c
#include &lt;stdio.h&gt;
#include &lt;sys/types.h&gt;
#include &lt;sys/wait.h&gt;
#include &lt;unistd.h&gt;
#include &lt;sys/ipc.h&gt;
#include &lt;sys/shm.h&gt;
int main()
{
int status;
if (fork() == 0)
{
printf(&quot;Hello from Child!\n&quot;);
key_t key = ftok(&quot;shmfile&quot;,65);
// shmget returns an identifier in shmid
int shmid = shmget(key,1024,0666|IPC_CREAT);
// shmat to attach to shared memory
char str = (char) shmat(shmid,NULL,0);

printf(&quot;Write Data : &quot;);
scanf(&quot;%s&quot;,str);
printf(&quot;Data written in memory: %s\n&quot;,str);
//detach from shared memory
shmdt(str);

}
else
{
wait(&amp;status);
printf(&quot;Hello from Parent!\n&quot;);
key_t key = ftok(&quot;shmfile&quot;,65);
// shmget returns an identifier in shmid
int shmid = shmget(key,1024,0666|IPC_CREAT);
// shmat to attach to shared memory
char str = (char) shmat(shmid,NULL,0);
printf(&quot;Data read from memory: %s\n&quot;,str);
//detach from shared memory
shmdt(str);
// destroy the shared memory
shmctl(shmid,IPC_RMID,NULL);
}
return 0;
}
